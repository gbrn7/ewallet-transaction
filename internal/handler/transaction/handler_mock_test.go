// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go
//
// Generated by this command:
//
//	mockgen -source=handler.go -destination=handler_mock_test.go -package=transaction
//

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	models "ewallet-transaction/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockService) CreateTransaction(ctx context.Context, req *models.Transaction) (models.CreateTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, req)
	ret0, _ := ret[0].(models.CreateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockServiceMockRecorder) CreateTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockService)(nil).CreateTransaction), ctx, req)
}

// GetTransaction mocks base method.
func (m *MockService) GetTransaction(ctx context.Context, userID uint64) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, userID)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockServiceMockRecorder) GetTransaction(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockService)(nil).GetTransaction), ctx, userID)
}

// GetTransactionDetail mocks base method.
func (m *MockService) GetTransactionDetail(ctx context.Context, reference string) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionDetail", ctx, reference)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionDetail indicates an expected call of GetTransactionDetail.
func (mr *MockServiceMockRecorder) GetTransactionDetail(ctx, reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionDetail", reflect.TypeOf((*MockService)(nil).GetTransactionDetail), ctx, reference)
}

// RefundTransaction mocks base method.
func (m *MockService) RefundTransaction(ctx context.Context, tokenData models.TokenData, req *models.RefundTransaction) (models.CreateTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundTransaction", ctx, tokenData, req)
	ret0, _ := ret[0].(models.CreateTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefundTransaction indicates an expected call of RefundTransaction.
func (mr *MockServiceMockRecorder) RefundTransaction(ctx, tokenData, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundTransaction", reflect.TypeOf((*MockService)(nil).RefundTransaction), ctx, tokenData, req)
}

// UpdateStatusTransaction mocks base method.
func (m *MockService) UpdateStatusTransaction(ctx context.Context, tokenData models.TokenData, req *models.UpdateStatusTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusTransaction", ctx, tokenData, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusTransaction indicates an expected call of UpdateStatusTransaction.
func (mr *MockServiceMockRecorder) UpdateStatusTransaction(ctx, tokenData, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusTransaction", reflect.TypeOf((*MockService)(nil).UpdateStatusTransaction), ctx, tokenData, req)
}
